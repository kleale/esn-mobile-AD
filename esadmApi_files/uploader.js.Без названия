/**
 * Class that creates upload widget with drag-and-drop and file list
 * @inherits qq.FineUploaderBasic
 */
qq.FineUploader = function(o){
    // call parent constructor
    qq.FineUploaderBasic.apply(this, arguments);

    // additional options
    qq.extend(this._options, {
        element: null,
        listElement: null,
        fileTemplate: '<div class="progress"><span class="progress-input"></span><div class="progress-bar"></div></div>',
        classes: {
            list: 'loader',
            progressBar: 'progress-bar',
            input: 'progress-input'
        },
        messages: {
            tooManyFilesError: "You may only drop one file"
        },
        showMessage: function(message){
            setTimeout(function() {
                alert(message);
            }, 0);
        }
    }, true);

    // overwrite options with user supplied
    qq.extend(this._options, o, true);
    this._wrapCallbacks();

    this._element = this._options.element;
    this._listElement = this._options.listElement || this._element;
    this._classes = this._options.classes;
    if (!this._button) {
        this._button = this._createUploadButton(this._find($(document)[0], 'button'));
    }
};

// inherit from Basic Uploader
qq.extend(qq.FineUploader.prototype, qq.FineUploaderBasic.prototype);

qq.extend(qq.FineUploader.prototype, {
    clearStoredFiles: function() {
        qq.FineUploaderBasic.prototype.clearStoredFiles.apply(this, arguments);
        this._listElement.innerHTML = "";
    },
    getItemByFileId: function(id){
        var item = this._listElement.firstChild;

        // there can't be txt nodes in dynamically created list
        // and we can  use nextSibling
        while (item){
            if (item.qqFileId == id) return item;
            item = item.nextSibling;
        }
    },
    cancel: function(fileId) {
        qq.FineUploaderBasic.prototype.cancel.apply(this, arguments);
        var item = this.getItemByFileId(fileId);
        qq(item).remove();
    },
    /**
     * Gets one of the elements listed in this._options.classes
     **/
    _find: function(parent, type){
        var element = qq(parent).getByClass(this._options.classes[type])[0];
        if (!element){
            throw new Error('element not found ' + type);
        }
        return element;
    },
    _onSubmit: function(id, fileName){
        qq.FineUploaderBasic.prototype._onSubmit.apply(this, arguments);
        this._addToList(id, fileName);
        $('div[rel='+this._options.request.name+']').find('p.help-block').remove();
        $('.loader .has-error').remove();
    },
    // Update the progress bar & percentage as the file is uploaded
    _onProgress: function(id, fileName, loaded, total){
        qq.FineUploaderBasic.prototype._onProgress.apply(this, arguments);

        var item = this.getItemByFileId(id);
        var progressBar = this._find(item, 'progressBar');
        var percent = Math.round(loaded / total * 100);

        qq(progressBar).css({display: 'block', width: percent + '%'});
        $(progressBar).html(percent + '%');
    },
    _onComplete: function(id, fileName, result, xhr){
        qq.FineUploaderBasic.prototype._onComplete.apply(this, arguments);
        var item = this.getItemByFileId(id);
        progressBar = this._find(item, 'progressBar');
        if (result.success) {
            var input = this._find(item, 'input');
            $(input).html('<input type="hidden" name="'+this._options.request.name+'" class="input" rel="'+this._options.request.rel+'" value="'+result.file+'">').show();
            $(progressBar).html('<a'+(result.crop > 0 ? ' data-toggle="popover" data-content="<img src='+result.url+'_'+result.crop+'/'+result.file+'>"' : '')+' href="'+result.url+result.file+'">'+result.txt+'</a>');
            if (this._options.request.preview) {
                var rand = Math.random() * 100;
                for(var j in this._options.request.preview) {
                    var b = this._options.request.preview[j];
                    $('#'+b).attr('src',result.url+result.file+'?'+rand);
                    if (b == 'logo') {
                        $('#'+b).attr('data-width',result.size[0]);
                        $('#'+b).attr('data-height',result.size[1]);
                    }
                }
            }
            tips();
        }
        else {
            $(progressBar).html(result.txt);
            var err = {};
            err[this._options.request.name] = result.error;
            form_error('update',err);
            $(progressBar).parent().addClass('has-error');
        }
    },
    _onUpload: function(id, fileName){
        qq.FineUploaderBasic.prototype._onUpload.apply(this, arguments);
        var item = this.getItemByFileId(id);
    },
    _addToList: function(id, fileName){
        var item = qq.toElement(this._options.fileTemplate);
        item.qqFileId = id;
        if (!this._options.multiple) this._clearList();
        this._listElement.appendChild(item);
    },
    _clearList: function(){
        this._listElement.innerHTML = '';
        this.clearStoredFiles();
    },
    _error: function(code, fileName){
        var message = qq.FineUploaderBasic.prototype._error.apply(this, arguments);
        this._options.showMessage(message);
    }
});
